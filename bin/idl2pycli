#!/usr/bin/perl

use strict;
use warnings;

use CORBA::IDL      2.60;
use CORBA::Python;
# visitors
use CORBA::IDL::RepositoryIdVisitor;
use CORBA::Python::ClientVisitor;

my $parser = CORBA::IDL::ParserFactory::create('3.0');
$parser->getopts('hi:J:Ovx');
if ($parser->YYData->{opt_v}) {
    print "CORBA::Python $CORBA::Python::VERSION\n";
    print "CORBA::IDL $CORBA::IDL::VERSION\n";
    print "IDL $CORBA::IDL::Parser::IDL_VERSION\n";
    print "$0\n";
    print "Perl $] on $^O\n";
    exit;
}
if ($parser->YYData->{opt_h}) {
    use Pod::Usage;
    pod2usage(-verbose => 1);
}

my $cflags = '-D__idl2pycli';
if ($CORBA::IDL::Parser::IDL_VERSION lt '3.0') {
    $cflags .= ' -D_PRE_3_0_COMPILER_';
}
my $preprocessor;
if ($^O eq 'MSWin32') {
    $preprocessor = 'cpp -C ' . $cflags;
#    $preprocessor = 'CL /E /C /nologo ' . $cflags;      # Microsoft VC
}
else {
    $preprocessor = 'cpp -C ' . $cflags;
}
$parser->Configure(
        'preprocessor'          => $preprocessor,
        'verbose_error'         => 1,   # 0, 1
        'verbose_warning'       => 1,   # 0, 1
        'verbose_info'          => 1,   # 0, 1
        'verbose_deprecated'    => 0,   # 0, 1 (concerns only version '2.4' and upper)
        'collision_allowed'     => 1,
);
$parser->Run(@ARGV);
$parser->DisplayStatus();
my $root = $parser->getRoot();
if (defined $root) {
    $root->visit(new CORBA::IDL::RepositoryIdVisitor($parser));
    if ($parser->YYData->{opt_x}) {
        $parser->Export();
    }
    $root->visit(new CORBA::Python::NameVisitor($parser));
    $root->visit(new CORBA::Python::ImportVisitor($parser));
    $root->visit(new CORBA::Python::LiteralVisitor($parser));
    $root->visit(new CORBA::Python::ClientVisitor($parser));
}

__END__

=head1 NAME

idl2pycli - IDL compiler to Python RPC-GIOP stub client

=head1 SYNOPSIS

idl2pycli [options] I<spec>.idl

=head1 OPTIONS

All options are forwarded to C preprocessor, except -h -i -J -v -x.

With the GNU C Compatible Compiler Processor, useful options are :

=over 8

=item B<-D> I<name>

=item B<-D> I<name>=I<definition>

=item B<-I> I<directory>

=item B<-I->

=item B<-nostdinc>

=back

Specific options :

=over 8

=item B<-h>

Display help.

=item B<-i> I<directory>

Specify a path for import (only for version IDL 3.0).

=item B<-J> I<directory>

Specify a path for Python package.

=item B<-v>

Display version.

=item B<-x>

Enable export (only for version IDL 3.0).

=back

=head1 DESCRIPTION

B<idl2pycli> parses the given input file (IDL) and generates :

=over 4

=item *
a set of Python sources : an optional _I<spec>.py
and I<pkg>/__init__.py for each package

=item *
setup.py

=back

B<idl2pycli> is a Perl OO application what uses the visitor design pattern.
The parser is generated by Parse::Yapp.

B<idl2pycli> needs a B<cpp> executable.

CORBA Specifications, including IDL (Interface Language Definition) and
Python Language Mapping are available on E<lt>http://www.omg.org/E<gt>.

=head1 INSTALLATION

After standard Perl installation, you must install the Python package PyIDL :

    setup.py install

=head1 TUTORIAL

=head2 RPC-GIOP

RPC-GIOP is an another RPC (Remote Procedure Call) mecanism.

RPC-GIOP reuses a subset of CORBA GIOP messages, but don't deal with
any CORBA ORB (Object Request Broker). RPC-GIOP reuses the CORBA CDR
(Common Data Representation) transfer syntax.

An interface (a set of operations) is defined with CORBA IDL
(Interface Definition Language).
And this package supplies an client stub generator F<idl2pycli> and
an server skeleton generator F<idl2pysrv>.

RPC-GIOP has a lot of common properties with CORBA GIOP :

=over 8

=item *
needs a reliable transport layer (typically TCP/IP)

=item *
uses a binary format (CDR)

=item *
is interoperable (byte-order)

=back

=head2 EXAMPLE 1

Use F<rpc1> as current directory.

The file F<Calc.idl> describes the interface of a simple calculator.

Nota : the IDL interface Calc is in the global scope.

First, run :

    idl2pycli Calc.idl

Second, install :

    python setup.py install

Third, create your client F<client.py> (Tkinter based)

Fourth, run the server (see idl2pysrv) and the client.

=head1 SEE ALSO

cpp, idl2html, idl2pysrv, idl2py

=head1 COPYRIGHT

(c) 2005-2007 Francois PERRAD, France. All rights reserved.

This program and all CORBA::Python modules are distributed
under the terms of the Artistic Licence.

=head1 AUTHOR

Francois PERRAD, francois.perrad@gadz.org

=cut

